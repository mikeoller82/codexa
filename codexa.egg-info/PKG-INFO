Metadata-Version: 2.4
Name: codexa
Version: 1.0.1
Summary: Codexa - AI-powered CLI coding assistant
Author-email: Mike <mike@example.com>
License: MIT License
        
        Copyright (c) 2025 Mike
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
Project-URL: Homepage, https://github.com/mike/codexa
Project-URL: Repository, https://github.com/mike/codexa
Project-URL: Issues, https://github.com/mike/codexa/issues
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: typer[all]>=0.12.0
Requires-Dist: rich>=13.7.0
Requires-Dist: openai>=1.50.0
Requires-Dist: anthropic>=0.34.0
Requires-Dist: pyyaml>=6.0
Requires-Dist: python-dotenv>=1.0.0
Requires-Dist: requests>=2.31.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0; extra == "dev"
Requires-Dist: black>=23.0; extra == "dev"
Requires-Dist: flake8>=6.0; extra == "dev"
Requires-Dist: mypy>=1.0; extra == "dev"
Dynamic: license-file

# Codexa - Enhanced AI Coding Assistant

Codexa is a powerful AI-powered CLI coding assistant that acts as your proactive development partner. With enhanced features including animated ASCII art, runtime provider switching, MCP server integration, and comprehensive slash commands, Codexa delivers a professional development experience.

## ‚ú® Enhanced Features

### üé® **Interactive Visual Experience**
- **Animated ASCII Art**: Beautiful startup animations with 5 themes (default, minimal, cyberpunk, retro, matrix)
- **Rich Terminal UI**: Professional console interface with animations and real-time feedback
- **Theme Selection**: Customizable visual themes for different preferences

### ‚ö° **Advanced Provider System**
- **Multiple AI Providers**: OpenAI, Anthropic, OpenRouter with runtime switching
- **Smart Model Selection**: Easy switching between models during sessions
- **Intelligent Fallbacks**: Automatic provider failover and retry logic
- **Performance Optimized**: Sub-second provider switching

### üì° **MCP Server Integration**
- **Context7**: Enhanced documentation and code examples
- **Sequential**: Complex reasoning and multi-step analysis  
- **Magic**: UI component generation and design systems
- **Extensible**: Support for additional MCP servers

### ‚ö° **Enhanced Slash Commands**
- `/help` - Contextual help and command discovery
- `/status` - System status with health indicators
- `/provider` - Runtime provider and model switching
- `/mcp` - MCP server management and queries
- `/commands` - Complete command reference
- `/config` - Configuration management

### üõ°Ô∏è **Production-Ready Reliability**
- **Comprehensive Error Handling**: Intelligent error recovery and user guidance
- **Performance Monitoring**: Real-time performance metrics and optimization
- **Health Monitoring**: Proactive system health checks and alerts
- **Session Analytics**: Usage tracking and improvement recommendations

## üöÄ Installation

```bash
# Install in development mode
pip install -e .

# Or install globally with pipx (recommended)
pipx install .
```

## üéØ Quick Start

Navigate to any directory and run:

```bash
codexa
```

**First Run Experience:**
1. **Animated Startup**: Watch the Codexa logo animation with system checks
2. **Interactive Setup**: Choose your AI provider and configure settings
3. **Theme Selection**: Pick your preferred visual theme
4. **Ready to Code**: Start building with natural language or slash commands

## üìä Enhanced Workflow

### **Traditional Workflow** (Still Available)
1. **Initialize**: Run `codexa` in your project directory
2. **Request**: Describe what you want to build
3. **Plan**: Review generated plans and requirements
4. **Execute**: Follow structured tasks or use natural language

### **Enhanced Workflow** (New!)
1. **Quick Setup**: Use `/config` for rapid configuration
2. **Provider Choice**: Switch providers with `/provider switch <name>`
3. **MCP Enhancement**: Enable servers with `/mcp enable <server>`
4. **Smart Suggestions**: Get contextual suggestions based on your project
5. **Real-time Help**: Use `/help` for instant contextual assistance

## üîß Core Features

### **Development Assistance**
- üåê **Global CLI**: Available anywhere on your system
- üìã **Proactive Planning**: Structured project planning and task breakdown
- üó£Ô∏è **Natural Language**: Conversational coding assistance
- üìÅ **Project Awareness**: Context-aware responses based on your codebase
- üîÑ **Iterative Workflow**: Approval-based development process

### **Enhanced Capabilities**
- ‚ö° **Real-time Switching**: Change providers/models without restart
- üéØ **Smart Suggestions**: Contextual recommendations based on usage
- üìä **Usage Analytics**: Track and optimize your development workflow  
- üîç **Advanced Help**: Intelligent help system with examples
- üõ†Ô∏è **Error Recovery**: Automatic error handling and recovery suggestions

## üé® Visual Themes

Choose from 5 beautiful ASCII art themes:

- **Default**: Clean cyan styling for professional use
- **Minimal**: Simple and elegant for distraction-free coding
- **Cyberpunk**: Bright magenta with futuristic styling
- **Retro**: Nostalgic yellow/green terminal aesthetics
- **Matrix**: Green-on-black matrix-inspired design

## üìã Requirements

### **System Requirements**
- **Python 3.8+**: Required for all functionality
- **Terminal**: Modern terminal with color support (recommended)
- **Internet**: Required for AI provider APIs and MCP servers

### **API Keys** (Choose One or More)
- **OpenAI**: Set `OPENAI_API_KEY` environment variable
- **Anthropic**: Set `ANTHROPIC_API_KEY` environment variable  
- **OpenRouter**: Set `OPENROUTER_API_KEY` environment variable

### **Optional Dependencies**
- **MCP Servers**: For enhanced capabilities (auto-detected)
- **Git**: For version control integration
- **Package Managers**: npm, pip, etc. for project scaffolding

## üéÆ Usage Guide

### **Basic Commands**

```bash
# Start Codexa
codexa

# Show version
codexa --version

# Initialize in specific directory
cd /path/to/project && codexa
```

### **Slash Commands Reference**

```bash
# Help & Information
/help                    # Show contextual help
/help <command>         # Get specific command help
/status                 # Show system status
/commands               # List all available commands

# Provider Management
/provider list          # Show available providers
/provider switch <name> # Switch to different provider
/provider status        # Show current provider info

# Model Management  
/model list            # Show available models
/model switch <name>   # Switch to different model
/model info <name>     # Get model information

# MCP Server Management
/mcp status            # Check MCP service status
/mcp list              # Show available servers
/mcp enable <server>   # Enable MCP server
/mcp disable <server>  # Disable MCP server
/mcp query <server> "request"  # Direct server query

# Configuration
/config show           # Show current configuration
/config set <key> <value>  # Update configuration
/config reset          # Reset to defaults
```

### **Natural Language Examples**

```bash
# Project Setup
"Create a React component for user authentication"
"Set up a Python FastAPI project with authentication" 
"Generate a Next.js app with TypeScript and Tailwind"

# Code Analysis
"Explain this function and suggest improvements"
"Review my code for security vulnerabilities"
"Optimize this database query for better performance"

# Development Tasks
"Add error handling to my API endpoints"
"Create unit tests for the user service"
"Refactor this component to use React hooks"

# Documentation
"Generate API documentation for my endpoints"
"Create a README for this project"
"Add comments to explain this complex algorithm"
```

## üîß Configuration

### **First-Time Setup**

1. **Set API Key**: 
   ```bash
   export OPENAI_API_KEY="your-api-key-here"
   # or ANTHROPIC_API_KEY, or OPENROUTER_API_KEY
   ```

2. **Run Codexa**:
   ```bash
   codexa
   ```

3. **Interactive Setup**: Follow the startup wizard to configure preferences

### **Configuration File**

Codexa creates a `.codexarc` file in your home directory:

```yaml
# ~/.codexarc
ai_provider: "openai"
default_model: "gpt-4o"
theme: "default"
enable_animations: true
mcp_servers:
  context7: 
    enabled: true
    priority: 1
  sequential:
    enabled: true  
    priority: 2
  magic:
    enabled: false
    priority: 3
```

### **Project-Specific Settings**

Each project gets a `CODEXA.md` file with project-specific guidelines:

```markdown
# Project Guidelines
- Code Style: Follow PEP8 for Python
- Testing: Use pytest with >90% coverage
- Documentation: Comprehensive docstrings required
```

## üöÄ Advanced Features

### **MCP Server Integration**

Enable enhanced capabilities with MCP servers:

```bash
# Enable documentation server
/mcp enable context7

# Enable reasoning server  
/mcp enable sequential

# Enable UI generation server
/mcp enable magic

# Query server directly
/mcp query context7 "show React hooks documentation"
```

### **Multi-Provider Workflow**

Switch between providers for different tasks:

```bash
# Use GPT-4 for complex reasoning
/provider switch openai
/model switch gpt-4o

# Use Claude for code analysis  
/provider switch anthropic
/model switch claude-3-5-sonnet

# Use OpenRouter for cost optimization
/provider switch openrouter
/model switch meta-llama/llama-3.1-70b
```

### **Theme Customization**

Personalize your Codexa experience:

```bash
# In your session
/config set theme cyberpunk
/config set enable_animations true

# Or edit ~/.codexarc directly
```

## üéØ Examples & Use Cases

### **Web Development**
- React/Vue component generation with accessibility
- API endpoint creation with documentation  
- Database schema design and migrations
- Frontend optimization and performance tuning

### **Backend Development**  
- Microservice architecture design
- API security and authentication
- Database query optimization
- Error handling and logging

### **DevOps & Infrastructure**
- Docker containerization
- CI/CD pipeline setup
- Monitoring and alerting
- Performance optimization

### **Data Science**
- Data analysis and visualization
- Machine learning model development
- Data pipeline creation
- Statistical analysis

## üêõ Troubleshooting

### **Common Issues**

**Codexa won't start:**
```bash
# Check Python version
python --version  # Should be 3.8+

# Verify installation
pip show codexa

# Try reinstalling
pip uninstall codexa && pip install -e .
```

**API Key Issues:**
```bash
# Verify API key is set
echo $OPENAI_API_KEY

# Test with different provider
/provider switch anthropic
```

**Performance Issues:**
```bash  
# Check system status
/status

# Reset configuration
/config reset

# Disable animations
/config set enable_animations false
```

**MCP Server Issues:**
```bash
# Check MCP status
/mcp status

# Restart MCP service
/mcp disable context7
/mcp enable context7
```

### **Getting Help**

- Use `/help` for contextual assistance
- Check `/status` for system health
- Review logs in `.codexa/logs/` 
- Report issues on GitHub

## ü§ù Contributing

Codexa is built with extensibility in mind:

- **Custom Commands**: Add slash commands via plugin system
- **MCP Servers**: Integrate additional MCP servers
- **Themes**: Create custom ASCII art themes
- **Providers**: Add new AI provider integrations

## üìä Performance

Codexa is optimized for speed and responsiveness:

- **Startup Time**: <1s typical, <3s with full features
- **Command Response**: <100ms for local operations  
- **Provider Switching**: <5s including model loading
- **Memory Usage**: <100MB typical usage
- **ASCII Rendering**: Real-time animation at 30fps

## üîí Privacy & Security

- **Local-First**: All processing happens on your machine
- **Secure Communications**: Encrypted API communications only
- **No Data Collection**: Codexa doesn't collect or store personal data
- **API Key Security**: Keys stored securely in environment variables
- **Sandboxed Plugins**: Plugin system uses security sandboxing

---

**Built with ‚ù§Ô∏è for developers who want a truly intelligent coding partner**

Codexa transforms your terminal into a powerful AI-enhanced development environment. Whether you're building web apps, APIs, or complex systems, Codexa provides the intelligence and tools you need to code faster and better.

## üìú License

MIT License - see LICENSE file for details.
